package uz.coder.daggerhilt.viewmodelsimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.launchimport uz.coder.daggerhilt.database.entity.UserEntityimport uz.coder.daggerhilt.repository.UserRepositoryimport uz.coder.daggerhilt.utils.NetworkHelperimport uz.coder.daggerhilt.utils.UserResourceimport javax.inject.Inject@HiltViewModelclass UserViewModel @Inject constructor(    private val userRepository: UserRepository,    private val networkHelper: NetworkHelper) : ViewModel() {    private val stateFlow = MutableStateFlow<UserResource>(UserResource.Loading)    init {        fetchUsers()    }    private fun fetchUsers() {        if (networkHelper.isNetworkConnected()) {            viewModelScope.launch {                val flow = userRepository.getUsers()                flow.catch {                    stateFlow.value = UserResource.Error(it.message ?: "Error")                }.collect {                    if (it.isSuccessful) {                        val arrayList = ArrayList<UserEntity>()                        it.body()?.forEach {                            arrayList.add(UserEntity(it.id, it.login, it.avatar_url))                        }                        userRepository.insertUsers(arrayList)                        stateFlow.value = UserResource.Success(userRepository.getDbUsers())                    }                }            }        } else {            stateFlow.value = UserResource.Error("No connection internet")        }    }    fun getUsers(): StateFlow<UserResource> {        return stateFlow    }}